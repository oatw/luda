// sass-lint:disable max-line-length
// sass-lint:disable variable-name-format
// sass-lint:disable max-file-line-count
$_CONSTANTS: (scale-ratios: (minor-second: 1.067, major-second: 1.125, minor-third: 1.2, major-third: 1.25, perfect-fourth: 1.333, augmented-fourth: 1.414, perfect-fifth: 1.5, golden-ratio: 1.618), typography-stacks: (sans-serif: ("Helvetica Neue", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Arial, sans-serif), code: (SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace)), baseline-offset-ratios: (Abel: 0.15772, "Abril Fatface": 0.1165, Anton: 0.096, Arial: 0.15332, "Arial Black": 0.10449, "Arial Narrow": 0.13818, Arimo: 0.15332, Arvo: 0.14307, Avenir: 0.183, Baskerville: 0.17407, "Bebas Neue": 0.2, Bitter: 0.165, "Bree Serif": 0.102, Cabin: 0.1425, Courier: 0.171, "Courier New": 0.23389, "Courier Prime": 0.31, "Crimson Text": 0.146, Dosis: 0.105, "Droid Sans": 0.15454, "Droid Serif": 0.15454, "Fira Sans": 0.225, "Fjalla One": 0.11963, Futura: 0.1106, Geneva: 0.125, "Gill Sans": 0.161, Georgia: 0.15112, Helvetica: 0.121, "Helvetica Neue": 0.128, Hind: 0.2455, Impact: 0.10107, Inconsolata: 0.1655, "Indie Flower": 0.25879, Josefin Sans: 0.25, Lato: 0.113, "League Gothic": 0.165, "Libre Baskerville": 0.15, "Libre Franklin": 0.14, Lobster: 0.125, Lora: 0.16235, "Lucida Grande": 0.122, Merriweather: 0.14502, "Merriweather Sans": 0.14502, Montserrat: 0.1415, Muli: 0.1225, "Noto Sans": 0.11206, "Noto Serif": 0.11206, Nunito: 0.171, "Open Sans": 0.11206, "Open Sans Condensed": 0.11206, Oswald: 0.04761, Oxygen: 0.10449, Palatino: 0.231, "Playfair Display": 0.08447, Poppins: 0.205, "PT Sans": 0.188, "PT Sans Narrow": 0.188, "PT Serif": 0.129, Raleway: 0.147, Roboto: 0.1582, "Roboto Condensed": 0.1582, "Roboto Slab": 0.11157, Rosario: 0.141, "San Francisco": 0.122, "Segoe UI": 0.086, "Slabo": 0.18519, "Source Sans Pro": 0.1445, "Source Code Pro": 0.145, "Source Serif Pro": 0.15, "Space Mono": 0.121, Tahoma: 0.10303, Times: 0.175, "Times New Roman": 0.1626, "Titillium Web": 0.1275, "Trebuchet MS": 0.1416, Ubuntu: 0.1285, "Ubuntu Condensed": 0.1285, "Varela Round": 0.184, Verdana: 0.1023, "Yanone Kaffeesatz": 0.1215, Yrsa: 0.25))
// sass-lint:enable max-line-length
// sass-lint:enable variable-name-format

@function constant-get($keys...)
  $value: $_CONSTANTS // sass-lint:disable-line variable-name-format
  @each $key in $keys
    @if $value and map-has-key($value, $key)
      $value: map-get($value, $key)
    @else
      $value: null
  @return $value

@function existing($values...)
  @each $value in $values
    @if $value
      @return $value
  @return null

@function pow($value, $pow)
  $pow-value: 1
  @if $pow > 0
    @for $i from 1 through $pow
      $pow-value: $pow-value * $value
  @else if $pow < 0
    @for $i from 1 through -$pow
      $pow-value: $pow-value / $value
  @return $pow-value

@function hsba($h-hsb, $s-hsb, $b-hsb, $a: 1)
  $value: null
  @if $b-hsb == 0
    $value: hsla(0, 0, 0, $a)
  @else
    $l-hsl: $b-hsb / 2 * (2 - $s-hsb / 100)
    $rotate-deg: if($l-hsl < 50, $l-hsl * 2, 200 - $l-hsl * 2)
    $s-hsl: if($s-hsb == 0, 0, $b-hsb * $s-hsb / $rotate-deg)
    $value: hsla($h-hsb, $s-hsl, $l-hsl, $a)
  @return $value

@function _mirror-nth-two($values: null)
  $right-value: if(length($values) >= 2, nth($values, 2), nth($values, 1))
  @return $right-value

@function _mirror-nth-three($values: null)
  $top-value: nth($values, 1)
  $bottom-value: if(length($values) >= 3, nth($values, 3), $top-value)
  @return $bottom-value

@function _mirror-nth-four($values: null)
  $left-value: if(length($values) >= 4, nth($values, 4), null)
  $left-value: if($left-value, $left-value, _mirror-nth-two($values))
  @return $left-value

@function mirror-nth($values, $index)
  $value: null
  @if $index == 2
    $value: _mirror-nth-two($values)
  @else if $index == 3
    $value: _mirror-nth-three($values)
  @else if $index == 4
    $value: _mirror-nth-four($values)
  @return $value

@function _is-same-unit($values...)
  $unit-cache: null
  @each $value in $values
    $value-unit: $value / strip-unit($value)
    @if $value-unit != 0
      @if not $unit-cache
        $unit-cache: $value-unit
      @else
        @if $unit-cache != $value-unit
          @return false
  @return true

@function _is-rem($value)
  @if $value / strip-unit($value) == 1rem
    @return true
  @return false

@function _is-px($value)
  @if $value / strip-unit($value) == 1px
    @return true
  @return false

@function strip-unit($value)
  @return $value / ($value * 0 + 1)

@function px-to-rem($px)
  @if $px
    @return $px / _root-typo-size-px() * 1rem
  @return null

@function rem-to-px($rem)
  @if $rem
    @return strip-unit($rem) * _root-typo-size-px()
  @return null

@function rem-to-em($rem, $typo-level: 6)
  @if $rem
    @return $rem / typo-size($typo-level) * 1em
  @return null

@function harmony-spacing($spacing, $border-width)
  @if (_is-rem($spacing) or _is-px($spacing)) and (_is-rem($border-width) or _is-px($border-width))
    $spacing-px: if(_is-rem($spacing), rem-to-px($spacing), $spacing)
    $border-width-px: if(_is-rem($border-width), rem-to-px($border-width), $border-width)
    @return px-to-rem($spacing-px - $border-width-px)
  @return null

@function _responsive-class-fix($breakpoint)
  $first-breakpoint: nth(map-keys($breakpoint-width-pxs), 1)
  $class-fix: if($breakpoint == $first-breakpoint, null, "-#{$breakpoint}")
  @return $class-fix

@function _root-typo-size-px()
  @return if($baseline-height-px >= 12px, $baseline-height-px, $typography-main-size-px)

@function _typo-baseline-height-px()
  @return if($typography-baseline-divided, $baseline-height-px / 2, $baseline-height-px)

@function _typo-size-px($level)
  $pow: pow($typography-size-scale-ratio, 6 - $level)
  $font-size: round($typography-main-size-px * $pow)
  $font-size: if($font-size < 12px, 12px, $font-size)
  // $font-size: if(strip-unit($font-size) % 2 == 0, $font-size, $font-size - 1px)
  @return $font-size

@function _typo-line-height-px($level, $expected-line-height-ratio)
  $typo-size-px: _typo-size-px($level)
  $typo-baseline-height-px: _typo-baseline-height-px()
  $expected-line-height-px: $typo-size-px * $expected-line-height-ratio
  $line-height-residue-px: $expected-line-height-px % $typo-baseline-height-px
  @if strip-unit($line-height-residue-px) == 0
    @return $expected-line-height-px
  $line-height-bound-px: $expected-line-height-px - $line-height-residue-px
  $line-height-lower-px: $line-height-bound-px - $typo-baseline-height-px
  $line-height-upper-px: $line-height-bound-px + $typo-baseline-height-px
  $line-height-lower-diff-px: $expected-line-height-px - $line-height-lower-px
  $line-height-upper-diff-px: $line-height-upper-px - $expected-line-height-px
  @if $line-height-lower-diff-px < $line-height-upper-diff-px
    @return $line-height-lower-px
  @return $line-height-upper-px

@function _typo-padding-top-px($level, $expected-line-height-ratio, $baseline-offset-ratio)
  $typo-size-px: _typo-size-px($level)
  $line-height-px: _typo-line-height-px($level, $expected-line-height-ratio)
  @return ($line-height-px - $typo-size-px) / 2 + $typo-size-px * $baseline-offset-ratio

@function _typo-padding-bottom-px($level, $expected-line-height-ratio, $baseline-offset-ratio)
  $offset-bottom-px: 0
  $baseline-count: 1
  $offset-top-px: _typo-padding-top-px($level, $expected-line-height-ratio, $baseline-offset-ratio)
  @while $offset-bottom-px <= 0
    $offset-bottom-px: _typo-baseline-height-px() * $baseline-count - $offset-top-px
    $baseline-count: $baseline-count + 1
  @return $offset-bottom-px

@function _typo-expected-line-height-ratio($typography, $level)
  $default: nth($typography-main-expected-line-height-ratios, 2)
  @if $typography == code
    @return existing($typography-code-expected-line-height-ratio, $default)
  @if $typography == quote
    $default: nth($typography-main-expected-line-height-ratios, 1)
    @return existing($typography-quote-expected-line-height-ratio, $default)
  @if $typography == heading
    $default: nth($typography-main-expected-line-height-ratios, 1)
    $line-height-ratio: nth($typography-heading-expected-line-height-ratios, $level)
    @return existing($line-height-ratio, $default)
  $line-height-ratio: nth($typography-main-expected-line-height-ratios, $level - 4)
  @return existing($line-height-ratio, $default)

// sass-lint:disable indentation
@function _typo-baseline-offset-ratio($typography)
  @if $typography == code and $typography-code-baseline-offset-ratio
    @return $typography-code-baseline-offset-ratio
  @if $typography == quote and $typography-quote-baseline-offset-ratio
    @return $typography-quote-baseline-offset-ratio
  @if $typography == heading and $typography-heading-baseline-offset-ratio
    @return $typography-heading-baseline-offset-ratio
  @return $typography-main-baseline-offset-ratio
// sass-lint:enable indentation

@function typo-size($level)
  @if $level
    @return px-to-rem(_typo-size-px($level))
  @return null

@function typo-line-height($level, $typography: main, $expected-line-height-ratio: null)
  @if $level == null
    @return null
  @if $expected-line-height-ratio == null
    $expected-line-height-ratio: _typo-expected-line-height-ratio($typography, $level)
  $line-height-px: _typo-line-height-px($level, $expected-line-height-ratio)
  @return px-to-rem($line-height-px)

@function typo-padding-top($level, $typography: main, $expected-line-height-ratio: null)
  @if $level == null
    @return null
  @if $expected-line-height-ratio == null
    $expected-line-height-ratio: _typo-expected-line-height-ratio($typography, $level)
  $baseline-offset-ratio: _typo-baseline-offset-ratio($typography)
  $padding-top-px: _typo-padding-top-px($level, $expected-line-height-ratio, $baseline-offset-ratio)
  @return px-to-rem($padding-top-px)

@function typo-padding-bottom($level, $typography: main, $expected-line-height-ratio: null)
  @if $level == null
    @return null
  @if $expected-line-height-ratio == null
    $expected-line-height-ratio: _typo-expected-line-height-ratio($typography, $level)
  $baseline-offset-ratio: _typo-baseline-offset-ratio($typography)
  $padding-bottom-px: _typo-padding-bottom-px($level, $expected-line-height-ratio, $baseline-offset-ratio)
  @return px-to-rem($padding-bottom-px)

@function baseline($count: 1)
  @return px-to-rem($baseline-height-px * $count)

@function _baseline-background($height, $color)
  $baseline-gradient: linear-gradient(to bottom, $color 0, rgba(255, 255, 255, 0) 1px)
  $baseline-background: $baseline-gradient left top / 100% $height repeat-y
  @return $baseline-background

@function _str-replace($string, $search, $replace: "")
  $index: str-index($string, $search)
  $sliced: if($index, str-slice($string, 1, $index - 1), null)
  $replaced-sliced: if($index, str-slice($string, $index + str-length($search)), null)
  $replaced: if($index, _str-replace($replaced-sliced, $search, $replace), null)
  @return if($index, $sliced + $replace + $replaced, $string)

@function svg-encode($svg)
  @if not str-index($svg, xmlns)
    $svg: _str-replace($svg, "<svg", '<svg xmlns="http://www.w3.org/2000/svg"')
  $encoded: ""
  $slice: 2000
  $index: 0
  $loops: ceil(str-length($svg) / $slice)
  @for $i from 1 through $loops
    $chunk: str-slice($svg, $index, $index + $slice - 1)
    $chunk: _str-replace($chunk, '"', "'")
    $chunk: _str-replace($chunk, "%", "%25")
    $chunk: _str-replace($chunk, "&", "%26")
    $chunk: _str-replace($chunk, "#", "%23")
    $chunk: _str-replace($chunk, "{", "%7B")
    $chunk: _str-replace($chunk, "}", "%7D")
    $chunk: _str-replace($chunk, "<", "%3C")
    $chunk: _str-replace($chunk, ">", "%3E")
    //    The maybe list 
    //    Keep size and compile time down
    //    ... only add on documented fail 
    //  $chunk: _str-replace($chunk, '|', '%7C')
    //  $chunk: _str-replace($chunk, '[', '%5B')
    //  $chunk: _str-replace($chunk, ']', '%5D')
    //  $chunk: _str-replace($chunk, '^', '%5E')
    //  $chunk: _str-replace($chunk, '`', '%60')
    //  $chunk: _str-replace($chunk, ';', '%3B')
    //  $chunk: _str-replace($chunk, '?', '%3F')
    //  $chunk: _str-replace($chunk, ':', '%3A')
    //  $chunk: _str-replace($chunk, '@', '%40')
    //  $chunk: _str-replace($chunk, '=', '%3D')
    $encoded: #{$encoded}#{$chunk}
    $index: $index + $slice
  @return unquote('"data:image/svg+xml,#{$encoded}"')

@function svg-icon($icon: null, $fill: null, $stroke: null)
  $icon: if($fill, _str-replace($icon, "#fill", "#{$fill}"), $icon)
  $icon: if($stroke, _str-replace($icon, "#stroke", "#{$stroke}"), $icon)
  @return svg-encode($icon)

@function _form-icon-size-em()
  @return existing($form-element-icon-size-em, $icon-size-em)

@function _form-icon-margin-top($form-element-height-rem, $form-element-typography-size-level)
  $border-bottom-width: mirror-nth($form-element-border-width, 3)
  $border-top-width: nth($form-element-border-width, 1)
  $border-bottom-unit-is-rem: _is-rem($border-bottom-width)
  $border-top-unit-is-rem: _is-rem($border-top-width)
  $font-size: typo-size($form-element-typography-size-level)
  $icon-size: $font-size * strip-unit(_form-icon-size-em())
  $total-height: ($form-element-height-rem + $icon-size) / 2
  $border-unit-is-rem: $border-bottom-unit-is-rem and $border-top-unit-is-rem
  $border-unit-is-the-same: _is-same-unit($border-bottom-width, $border-top-width)
  $border-vertical-diff: if($border-unit-is-the-same, ($border-top-width - $border-bottom-width) / 2, null)
  @if $border-unit-is-rem
    @return $border-vertical-diff - $total-height
  @else if $border-unit-is-the-same
    @if strip-unit($border-vertical-diff) == 0
      @return - $total-height
    @return calc(#{$border-vertical-diff} - #{$total-height})
  @else
    @return calc(#{$border-top-width / 2} - #{$border-bottom-width / 2} - #{$total-height})

@function form-element-icon-color-on-focus()
  $icon-color: if($form-element-icon-color-on-focus, $form-element-icon-color-on-focus, $form-element-icon-color)
  @return $icon-color

@function form-element-icon-color-on-error()
  $icon-color: if($form-element-icon-color-on-error, $form-element-icon-color-on-error, $form-element-icon-color)
  @return $icon-color

@function form-element-background-on-focus()
  $background: if($form-element-background-on-focus, $form-element-background-on-focus, $form-element-background)
  @return $background

@function form-element-background-on-error()
  $background: if($form-element-background-on-error, $form-element-background-on-error, $form-element-background)
  @return $background